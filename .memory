# MailMind Project Memory

## Core Purpose
- Email categorization and management system using AI
- Processes emails from multiple accounts via IMAP
- Uses OpenAI's GPT models for email classification
- Moves emails to appropriate folders based on AI categorization

## Key Components
1. Configuration (config.yaml)
   - OpenAI settings (API key, model, temperature, etc.)
   - Email account configurations
   - Processing options
   - Logging settings

2. Email Accounts
   - Supports multiple email accounts
   - Each account has:
     - IMAP connection details
     - Custom categories/folders
     - Processing rules

3. Categories
   - Predefined categories per account
   - Each category has:
     - Name
     - Description
     - Target folder

4. Processing Features
   - Batch processing
   - Lookback period for historical emails
   - Minimum samples for training
   - Test set validation
   - IMAP IDLE support

5. State Management
   - Local SQLite database for tracking processed emails
   - CLI tools for state management

## Environment Variables
Key overrides:
- OPENAI_API_KEY
- MAILMIND_OPENAI_MODEL
- MAILMIND_OPENAI_TEMPERATURE
- MAILMIND_OPENAI_MAX_TOKENS
- MAILMIND_OPENAI_BATCH_SIZE
- MAILMIND_MOVE_EMAILS
- MAILMIND_MAX_EMAILS
- MAILMIND_LOOKBACK_DAYS
- MAILMIND_MIN_SAMPLES
- MAILMIND_TEST_SIZE
- MAILMIND_IDLE_TIMEOUT
- MAILMIND_RECONNECT_DELAY
- MAILMIND_LOG_LEVEL
- MAILMIND_LOG_FILE
- MAILMIND_LOG_FORMAT

## Important Paths
- Config: config.yaml
- Logs: ~/.mailmind/logs/mailmind.log
- State DB: ~/.emailfilter/processed_emails.db

## CLI Commands
- View state: python -m emailfilter.cli state view
- Clean state: python -m emailfilter.cli state clean
- Reset state: python -m emailfilter.cli state reset 

## Tests
All tests use pytest framework and are located in tests/

### Integration Tests (test_integration.py)
- Tests cover:
  - Email categorization flow
  - Category distribution
  - Training data preparation
- Run with: pytest tests/test_integration.py
- Requires test config in tests/integration/test_config.yaml
- Uses mock IMAP server for testing
- Mocks OpenAI API calls to avoid real API usage

### Categorizer Tests (test_categorizer.py)
- Tests cover:
  - Email category enumeration
  - OpenAI client initialization
  - Batch email categorization
  - Category info preparation
  - System and user prompt creation
  - API calls and response parsing
  - Category validation
  - JSON object extraction

### Filter Tests (test_filter.py)
- Tests cover:
  - Email filtering functionality

### Logging Tests (test_logging.py)
- Tests cover:
  - Logging configuration and functionality

### Local State Tests (test_local_state.py)
- Tests cover:
  - Local state management
  - Database operations
  - State tracking

### Test Configuration (conftest.py)
- Contains shared test fixtures and configuration
- Sets up mock servers and test data
- Configures test environment 

## Core Modules

### Pre-Training Manager (pre_training.py)
- Manages pre-training data preparation and analysis
- Key features:
  - Category change monitoring
  - Training data preparation
  - Category distribution analysis
  - Ambiguous category detection
- Configuration options:
  - Check interval for category monitoring
  - Lookback period for email changes
  - Minimum samples per category
  - Test set size
  - Random state for reproducibility
- Uses:
  - SQLiteStateManager for state tracking
  - EmailProcessor for email handling
  - EmailCategorizer for categorization
  - IMAPManager for email access

### SQLite State Manager (sqlite_state_manager.py)
- Manages processed email state using SQLite
- Key features:
  - Email processing tracking
  - Category management
  - Database connection pooling
  - Query interface for processed emails
  - Category statistics
- Database schema:
  - processed_emails table:
    - Email metadata (ID, account, hash, message_id, etc.)
    - Processing status and category
    - Timestamps
  - categories table:
    - Category definitions
    - Folder mappings
- Important methods:
  - is_email_processed(): Check processing status
  - mark_email_as_processed(): Update processing state
  - cleanup_old_entries(): Remove old records
  - get_category_stats(): Get category distribution
  - query_processed_emails(): Search processed emails
- Configuration:
  - Database path via MAILMIND_STATE_DIR env var
  - Default path: ~/.mailmind/processed_emails.db
  - Supports in-memory database for testing 