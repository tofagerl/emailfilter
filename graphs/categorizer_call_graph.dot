digraph G {
  rankdir=TB;
  node [shape=box, style=filled, fillcolor=lightblue, fontname="Arial"];
  edge [fontname="Arial", fontsize=10];
  subgraph cluster_api {
    label="API";
    style=filled;
    color=lightgrey;
    node [style=filled, fillcolor=lightblue];
    "call_openai_api" [label="call_openai_api\n(system_prompt, user_prompt, model)", tooltip="Call the OpenAI API with the given prompts."];
  }
  subgraph cluster_initialization {
    label="Initialization";
    style=filled;
    color=lightgrey;
    node [style=filled, fillcolor=lightblue];
    "initialize_openai_client" [label="initialize_openai_client\n(api_key, config_path)", tooltip="Initialize the OpenAI client with an API key."];
  }
  subgraph cluster_prompt {
    label="Prompt";
    style=filled;
    color=lightgrey;
    node [style=filled, fillcolor=lightblue];
    "create_email_category_enum" [label="create_email_category_enum\n(categories)", tooltip="Create a dynamic EmailCategory enum with the given categories."];
    "create_system_prompt" [label="create_system_prompt\n(category_info, categories)", tooltip="Create the system prompt for the OpenAI API."];
    "create_user_prompt" [label="create_user_prompt\n(emails, batch_size)", tooltip="Create the user prompt for the OpenAI API."];
  }
  subgraph cluster_response {
    label="Response";
    style=filled;
    color=lightgrey;
    node [style=filled, fillcolor=lightblue];
    "validate_and_normalize_category" [label="validate_and_normalize_category\n(result, valid_categories)", tooltip="Validate and normalize a category in a result."];
    "parse_openai_response" [label="parse_openai_response\n(response_text, categories, batch_size)", tooltip="Parse the OpenAI API response."];
    "extract_json_objects" [label="extract_json_objects\n(response_text)", tooltip="Extract JSON objects from a text response."];
  }
  subgraph cluster_utility {
    label="Utility";
    style=filled;
    color=lightgrey;
    node [style=filled, fillcolor=lightblue];
    "prepare_category_info" [label="prepare_category_info\n(account)", tooltip="Extract category information from an account."];
    "batch_categorize_emails_for_account" [label="batch_categorize_emails_for_account\n(emails, account, batch_size, model)", tooltip="Categorize a batch of emails for a specific account."];
    "__str__" [label="__str__\n(self)", tooltip=""];
  }
  subgraph cluster_logging {
    label="Logging";
    style=filled;
    color=lightgrey;
    node [style=filled, fillcolor=lightblue];
    "log_openai_interaction" [label="log_openai_interaction\n(email, prompt, response, category_result)", tooltip="Log OpenAI API interaction for debugging."];
  }
  "initialize_openai_client" -> "OpenAI";
  "initialize_openai_client" -> "debug";
  "initialize_openai_client" -> "open";
  "initialize_openai_client" -> "safe_load";
  "initialize_openai_client" -> "get";
  "initialize_openai_client" -> "ValueError";
  "initialize_openai_client" -> "OpenAI";
  "initialize_openai_client" -> "debug";
  "initialize_openai_client" -> "error";
  "initialize_openai_client" -> "get";
  "initialize_openai_client" -> "OpenAI";
  "initialize_openai_client" -> "debug";
  "initialize_openai_client" -> "ValueError";
  "log_openai_interaction" -> "info";
  "log_openai_interaction" -> "get";
  "log_openai_interaction" -> "get";
  "log_openai_interaction" -> "get";
  "log_openai_interaction" -> "error";
  "prepare_category_info" -> "append";
  "create_system_prompt" -> "dumps";
  "create_system_prompt" -> "join";
  "create_user_prompt" -> "enumerate";
  "create_user_prompt" -> "get";
  "create_user_prompt" -> "get";
  "create_user_prompt" -> "get";
  "create_user_prompt" -> "get";
  "create_user_prompt" -> "get";
  "call_openai_api" -> "ValueError";
  "call_openai_api" -> "create";
  "extract_json_objects" -> "findall";
  "validate_and_normalize_category" -> "upper";
  "validate_and_normalize_category" -> "warning";
  "parse_openai_response" -> "extract_json_objects";
  "parse_openai_response" -> "upper";
  "parse_openai_response" -> "loads";
  "parse_openai_response" -> "validate_and_normalize_category";
  "parse_openai_response" -> "append";
  "parse_openai_response" -> "error";
  "parse_openai_response" -> "append";
  "parse_openai_response" -> "error";
  "parse_openai_response" -> "len";
  "parse_openai_response" -> "append";
  "batch_categorize_emails_for_account" -> "min";
  "batch_categorize_emails_for_account" -> "len";
  "batch_categorize_emails_for_account" -> "prepare_category_info";
  "batch_categorize_emails_for_account" -> "create_system_prompt";
  "batch_categorize_emails_for_account" -> "create_user_prompt";
  "batch_categorize_emails_for_account" -> "call_openai_api";
  "batch_categorize_emails_for_account" -> "parse_openai_response";
  "batch_categorize_emails_for_account" -> "enumerate";
  "batch_categorize_emails_for_account" -> "len";
  "batch_categorize_emails_for_account" -> "log_openai_interaction";
  "batch_categorize_emails_for_account" -> "error";
  "batch_categorize_emails_for_account" -> "str";
  "batch_categorize_emails_for_account" -> "enumerate";
  "batch_categorize_emails_for_account" -> "log_openai_interaction";
  "batch_categorize_emails_for_account" -> "str";
  "create_email_category_enum" -> "upper";
  "create_email_category_enum" -> "auto";
  "create_email_category_enum" -> "Enum";
  "__str__" -> "capitalize";
}
