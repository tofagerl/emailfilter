digraph G {
  rankdir=TB;
  node [shape=box, style=filled, fillcolor=lightblue, fontname="Arial"];
  edge [fontname="Arial", fontsize=10];
  subgraph cluster_api {
    label="API";
    style=filled;
    color=lightgrey;
    node [style=filled, fillcolor=lightblue];
    "_call_api" [label="_call_api\n(self, system_prompt, user_prompt)", tooltip="Call the OpenAI API with the given prompts."];
  }
  subgraph cluster_initialization {
    label="Initialization";
    style=filled;
    color=lightgrey;
    node [style=filled, fillcolor=lightblue];
    "__init__" [label="__init__\n(self, api_key, config_path, config)", tooltip="Initialize the email categorizer."];
    "_initialize_client" [label="_initialize_client\n(self, api_key, config_path)", tooltip="Initialize the OpenAI client with an API key."];
    "initialize_openai_client" [label="initialize_openai_client\n(api_key, config_path)", tooltip="Initialize the OpenAI client (backward compatibility)."];
  }
  subgraph cluster_prompt {
    label="Prompt";
    style=filled;
    color=lightgrey;
    node [style=filled, fillcolor=lightblue];
    "_create_user_prompt" [label="_create_user_prompt\n(self, emails, batch_size)", tooltip="Create the user prompt for the OpenAI API."];
    "create_email_category_enum" [label="create_email_category_enum\n(categories)", tooltip="Create a dynamic EmailCategory enum with the given categories."];
    "_create_system_prompt" [label="_create_system_prompt\n(self, categories)", tooltip="Create the system prompt for the OpenAI API."];
  }
  subgraph cluster_response {
    label="Response";
    style=filled;
    color=lightgrey;
    node [style=filled, fillcolor=lightblue];
    "_parse_response" [label="_parse_response\n(self, response_text, categories, batch_size)", tooltip="Parse the OpenAI API response."];
    "_validate_category" [label="_validate_category\n(self, result, valid_categories)", tooltip="Validate and normalize a category in a result."];
    "_parse_json_object" [label="_parse_json_object\n(self, json_str)", tooltip="Parse a JSON object string."];
    "_extract_json_objects" [label="_extract_json_objects\n(self, response_text)", tooltip="Extract JSON objects from a text response."];
  }
  subgraph cluster_utility {
    label="Utility";
    style=filled;
    color=lightgrey;
    node [style=filled, fillcolor=lightblue];
    "__str__" [label="__str__\n(self)", tooltip=""];
    "batch_categorize_emails_for_account" [label="batch_categorize_emails_for_account\n(emails, account, batch_size, model)", tooltip="Categorize emails for an account (backward compatibility)."];
    "_prepare_category_info" [label="_prepare_category_info\n(self, categories)", tooltip="Extract category information."];
    "categorize_emails" [label="categorize_emails\n(self, emails, categories)", tooltip="Categorize a batch of emails."];
  }
  subgraph cluster_logging {
    label="Logging";
    style=filled;
    color=lightgrey;
    node [style=filled, fillcolor=lightblue];
    "_log_interaction" [label="_log_interaction\n(self, email, prompt, response, category_result)", tooltip="Log OpenAI API interaction for debugging."];
  }
  "__init__" -> "upper";
  "__init__" -> "CategorizerConfig";
  "__init__" -> "_initialize_client";
  "_initialize_client" -> "OpenAI";
  "_initialize_client" -> "debug";
  "_initialize_client" -> "open";
  "_initialize_client" -> "safe_load";
  "_initialize_client" -> "get";
  "_initialize_client" -> "ConfigurationError";
  "_initialize_client" -> "OpenAI";
  "_initialize_client" -> "debug";
  "_initialize_client" -> "error";
  "_initialize_client" -> "ConfigurationError";
  "_initialize_client" -> "get";
  "_initialize_client" -> "OpenAI";
  "_initialize_client" -> "debug";
  "_initialize_client" -> "ConfigurationError";
  "_log_interaction" -> "info";
  "_log_interaction" -> "get";
  "_log_interaction" -> "get";
  "_log_interaction" -> "get";
  "_log_interaction" -> "error";
  "_prepare_category_info" -> "append";
  "_prepare_category_info" -> "getattr";
  "_create_system_prompt" -> "_prepare_category_info";
  "_create_system_prompt" -> "dumps";
  "_create_system_prompt" -> "join";
  "_create_user_prompt" -> "enumerate";
  "_create_user_prompt" -> "get";
  "_create_user_prompt" -> "get";
  "_create_user_prompt" -> "get";
  "_create_user_prompt" -> "get";
  "_create_user_prompt" -> "get";
  "_call_api" -> "APIError";
  "_call_api" -> "create";
  "_call_api" -> "error";
  "_call_api" -> "APIError";
  "_extract_json_objects" -> "findall";
  "_parse_json_object" -> "loads";
  "_validate_category" -> "upper";
  "_validate_category" -> "warning";
  "_parse_response" -> "_extract_json_objects";
  "_parse_response" -> "upper";
  "_parse_response" -> "_parse_json_object";
  "_parse_response" -> "_validate_category";
  "_parse_response" -> "append";
  "_parse_response" -> "error";
  "_parse_response" -> "append";
  "_parse_response" -> "error";
  "_parse_response" -> "len";
  "_parse_response" -> "append";
  "categorize_emails" -> "min";
  "categorize_emails" -> "len";
  "categorize_emails" -> "_create_system_prompt";
  "categorize_emails" -> "_create_user_prompt";
  "categorize_emails" -> "_call_api";
  "categorize_emails" -> "_parse_response";
  "categorize_emails" -> "enumerate";
  "categorize_emails" -> "len";
  "categorize_emails" -> "_log_interaction";
  "categorize_emails" -> "error";
  "categorize_emails" -> "str";
  "categorize_emails" -> "enumerate";
  "categorize_emails" -> "_log_interaction";
  "categorize_emails" -> "str";
  "categorize_emails" -> "error";
  "categorize_emails" -> "str";
  "create_email_category_enum" -> "upper";
  "create_email_category_enum" -> "auto";
  "create_email_category_enum" -> "Enum";
  "__str__" -> "capitalize";
  "initialize_openai_client" -> "EmailCategorizer";
  "batch_categorize_emails_for_account" -> "EmailCategorizer";
  "batch_categorize_emails_for_account" -> "CategorizerConfig";
  "batch_categorize_emails_for_account" -> "append";
  "batch_categorize_emails_for_account" -> "Category";
  "batch_categorize_emails_for_account" -> "getattr";
  "batch_categorize_emails_for_account" -> "categorize_emails";
}
